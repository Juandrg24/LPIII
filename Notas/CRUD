CRUD

C  Crear(Insertar)
R  leer(Consultar)
U  Actualizar
D  Eliminar


Base de Datos 
Creacion de tablas mientras se trabaje con un entorno se recomienda trabajar en plural

Char asigna un espacio estatico

JDBC    =conectividad de bases de datos abiertas con java

xmlns   =

ns      =   name space

DAO     =   Data Access Object //Patron de dise√±o 

JPA     =   Java 

fechaMatricula  =   fecha_matricula //Este campo es mejor tabajarlo todo en minuscula


Pasos 
1. Creamos la base de datos
    Tablas
2. Creamos el archivo Spring con las dependencias 
    
3. Lo importamos 

4. Vamos a resource 
    Agregamos al arcrivo application un 
        # Conexion a la base de datos 
        spring.datesource.url=jdbc:mysql://localhost/matricula?serverTimeZone=America/Bogota
        # Usuario de mysql
        spring.datasource.username=root
        # password de mysql
        spring.datasource.password=

5. Creamos el archivo (Controller)Controller.java en la carpeta del main en el primer paquete
   - Importamos el Controller y el @GetMapping
    -Creamos un metodo que retornara el archivo html

6. En la carpeta Templates 
    -Creamos el archivo html con el mismo nombre que retornamos en el archivo Controller(GetMapping)
    Se le cambia el lenguaje y se le agrega el xmls con la direccion de thymeleaf <html lang="es" xmlns="https://www.thymeleaf.org">

7. Creamos lo que necesitamos en el html
8. Creamos en la carpeta donde esta el Controller un(Contructor) archivo .java con los getters and setters
    -Definimos las variables para crear un contructor y generamos los gettes an setters
    -Agregamos @Entity
    -@Entity //trabajar con base de datos 
    -@Table(name="nombre de la tabla a conectar") /Especificar que es con esa tabla 
    -@Id // Es para buscar por el Id

9.Creamos en la carpeta del controller un archivo (Interface)interface(manipula una herencia para tomar varios elementos de una clase) .java
    creamos un metodo llamado guardar(Dentro le enviamos el contructor que reamos anteriormente)


10.Creamos otro archivo interface (DAO).java
    -Agregamos a la clase un extends  JpaRepository<Estudiante, Integer>
    -Agregamos @Repository

11.Creamos otro (Servicio)archivo .java en la misma carpeta
    -Agregamos @Service
    -Implmentamos los metodos. Agregando a la clase principal el implements
    
    Dentro de la clase
    -Agregamos @Autowired
    private EstudianteDAO estudianteDAO; // Se encarga de toda la manipulacion de los setters

    En el Primer Override(Save)
    -Agregamos @Transactional //Se encarga de las transacciones de informacion(guardar, eliminar, modificar)
    
    -Utilizamos  //Metodo save inserta datos 
        estudianteDAO.save(estudiante);

12.Vamos al controller 
    -Agregamos @SessionAttributes //Darle seguridad con que vamos a iniciar Ej: @SessionAttributes ("estudiante")
    -Agregamos dentro de la clase
    @Autowired
    -Agregamos a la funcion estudainte insertar los parametros (Model model)
    -Iniciamos una instacia de nuestra clase con los geters and Setters
    -Creamos los model.addAtribute 
    -Creamos el paso de informacion
        -Agregamos un @PostMapping
        -Creamos un metodo publico String llamdo insertar 
        Le enviamos como atributo esto (@ModelAttribute(name = "estudiante") Estudiante estudiante, Model model,
            SessionStatus status)
        -Hacemos las importaciones necesarias
        -retornamos "redirect:/estudianteListar";//Cambia ubicacion a la que se quiere(Esto es cuando se tiene un listar o alguna ventana para mostrar) 

    -Revisar el html en el form tener lo siguiente 
      
        <form method="post" class="row g-3" th:action="@{/insertar}" th:object="${paciente}" >


    









